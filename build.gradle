import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'org.springframework.boot' version '2.3.7.RELEASE'
	id 'io.spring.dependency-management' version '1.0.10.RELEASE'
	id 'java'
}

group = 'top.aaronysj'
version = '1.1.1'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
repositories {
	mavenCentral()
}
dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'com.rometools:rome:1.9.0'

	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	implementation 'cn.hutool:hutool-all:5.7.13'
	implementation fileTree(dir: 'taobao', include:['*.jar'])
//	implementation 'org.jsoup:jsoup:1.14.3'
	implementation 'org.springframework.boot:spring-boot-starter-amqp'

	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

task generateDockerCompose {
	def templateArgs = [
			// tag
			image_tag: "$version".toString(),
	]
	def dockerScripts = file("${rootDir}/gradle/template/docker")
	dependsOn tasks.create("${project.name}-DockerFileCopy", Copy) {
		from dockerScripts
		into "$rootDir/docker/app/"
		filter(ReplaceTokens, tokens: templateArgs)
	}
}

allprojects {
	bootJar.dependsOn generateDockerCompose
}

test {
	useJUnitPlatform()
}
